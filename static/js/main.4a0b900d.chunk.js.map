{"version":3,"sources":["containers/Quiz/Quiz.module.css","components/ActiveQuiz/ActiveQuiz.module.css","components/ActiveQuiz/AnswersList/AnswerItem/AnswerItem.module.css","hoc/Layout/Layout.module.css","components/ActiveQuiz/AnswersList/AnswersList.module.css","hoc/Layout/Layout.js","components/ActiveQuiz/AnswersList/AnswerItem/AnswerItem.js","components/ActiveQuiz/AnswersList/AnswersList.js","components/ActiveQuiz/ActiveQuiz.js","containers/Quiz/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Layout","className","classes","this","props","children","Component","AnswerItem","cls","state","push","join","onClick","onAnswerClick","answer","id","text","AnswersList","answers","map","index","key","ActiveQuiz","Question","answerNumber","question","quizLength","Quiz","activeQuestion","answerState","quiz","rightAnswerId","onAnswerClickHandler","answerId","Object","keys","setState","timeout","window","setTimeout","isQuizFinished","console","log","clearTimeout","length","QuizWrapper","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4a0b900d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Quiz\":\"Quiz_Quiz__1NHQK\",\"QuizWrapper\":\"Quiz_QuizWrapper__DPoaL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ActiveQuiz\":\"ActiveQuiz_ActiveQuiz__3sdjV\",\"Question\":\"ActiveQuiz_Question__2uHtG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswerItem\":\"AnswerItem_AnswerItem__3cpKr\",\"success\":\"AnswerItem_success__Kdt-S\",\"error\":\"AnswerItem_error__2gDYp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__1s2jD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswersList\":\"AnswersList_AnswersList__2TtY8\"};","import React, {Component} from 'react';\r\nimport classes from './Layout.module.css';\r\n\r\nclass Layout extends Component {\r\n    render() {\r\n        return (\r\n            <div className={classes.Layout}>\r\n\r\n                <main>\r\n                    {this.props.children}\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Layout;","import React from 'react';\r\nimport classes from './AnswerItem.module.css';\r\n\r\nconst AnswerItem = (props) => {\r\n    const cls = [classes.AnswerItem]\r\n\r\n    if(props.state) {\r\n    cls.push(classes[props.state])\r\n    }\r\n    return (\r\n        <li className={cls.join(' ')}\r\n            onClick={()=>{props.onAnswerClick(props.answer.id)}}\r\n        >\r\n            {props.answer.text}\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default AnswerItem;","import React from 'react';\r\nimport classes from './AnswersList.module.css';\r\nimport AnswerItem from \"./AnswerItem/AnswerItem\";\r\n\r\nconst AnswersList = (props) => (\r\n    <ul className={classes.AnswersList}>\r\n        {props.answers.map((answer,index)=> {\r\n            return(\r\n                <AnswerItem\r\n                    key={index}\r\n                    answer={answer}\r\n                    onAnswerClick={props.onAnswerClick}\r\n                    state={props.state ? props.state[answer.id]:null}\r\n                />\r\n            )\r\n        })}\r\n    </ul>\r\n);\r\n\r\nexport default AnswersList;","import React from 'react';\r\nimport classes from './ActiveQuiz.module.css'\r\nimport AnswersList from \"./AnswersList/AnswersList\";\r\n\r\nconst ActiveQuiz = (props) => (\r\n    <div className={classes.ActiveQuiz}>\r\n        <p className={classes.Question}>\r\n            <span>\r\n                <strong>{props.answerNumber}. </strong>\r\n                {props.question}\r\n            </span>\r\n            <small>{props.answerNumber} из {props.quizLength}</small>\r\n        </p>\r\n        <AnswersList\r\n            state={props.state}\r\n            answers={props.answers}\r\n            onAnswerClick={props.onAnswerClick}\r\n        />\r\n\r\n    </div>\r\n);\r\n\r\nexport default ActiveQuiz;","import React, {Component} from 'react';\r\nimport classes from './Quiz.module.css';\r\nimport ActiveQuiz from \"../../components/ActiveQuiz/ActiveQuiz\";\r\n\r\nclass Quiz extends Component {\r\n    state = {\r\n        activeQuestion: 0,\r\n        answerState: null, // { [id]: 'success' 'error' }\r\n        quiz: [\r\n            {\r\n                question: 'Какого цвета небо?',\r\n                rightAnswerId: 2,\r\n                id: 1,\r\n                answers: [\r\n                    {text: 'Черный', id: 1},\r\n                    {text: 'Синий', id: 2},\r\n                    {text: 'Красный', id: 3},\r\n                    {text: 'Зеленый', id: 4}\r\n                ]\r\n            },\r\n            {\r\n                question: 'В каком году основали Санкт-Петербург?',\r\n                rightAnswerId: 3,\r\n                id: 2,\r\n                answers: [\r\n                    {text: '1700', id: 1},\r\n                    {text: '1702', id: 2},\r\n                    {text: '1703', id: 3},\r\n                    {text: '1803', id: 4}\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n\r\n    onAnswerClickHandler = answerId => {\r\n\r\n        // check right. if double click on right answer\r\n        if(this.state.answerState) {\r\n            const key = Object.keys(this.state.answerState)[0]\r\n            if (this.state.answerState[key] === 'success') {\r\n                return\r\n            }\r\n        }\r\n\r\n        const question = this.state.quiz[this.state.activeQuestion]\r\n\r\n        if (question.rightAnswerId === answerId) {\r\n\r\n            this.setState({\r\n                answerState: {[answerId]: 'success'}\r\n            })\r\n\r\n            const timeout = window.setTimeout(() => {\r\n                if (this.isQuizFinished()) {\r\n                    console.log('Finished')\r\n                } else {\r\n                    this.setState({\r\n                        activeQuestion: this.state.activeQuestion + 1,\r\n                        answerState: null\r\n                    })\r\n                }\r\n                window.clearTimeout(timeout)\r\n            }, 1000)\r\n        } else {\r\n            this.setState({\r\n                answerState: {[answerId]: 'error'}\r\n            })\r\n        }\r\n    }\r\n\r\n    isQuizFinished() {\r\n        return this.state.activeQuestion + 1 === this.state.quiz.length\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Quiz}>\r\n                <div className={classes.QuizWrapper}>\r\n                    <h1>Ответьте на все вопросы</h1>\r\n\r\n                    <ActiveQuiz\r\n                        answers={this.state.quiz[this.state.activeQuestion].answers}\r\n                        question={this.state.quiz[this.state.activeQuestion].question}\r\n                        onAnswerClick={this.onAnswerClickHandler}\r\n                        quizLength={this.state.quiz.length}\r\n                        answerNumber={this.state.activeQuestion + 1}\r\n                        state={this.state.answerState}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Quiz;","import React from 'react';\nimport Layout from \"./hoc/Layout/Layout\";\nimport Quiz from \"./containers/Quiz/Quiz\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n          <Layout>\n         <Quiz/>\n          </Layout>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}