{"version":3,"sources":["components/StartQuiz/StartQuiz.module.css","components/Navigation/Drawer/Drawer.module.css","img/hand-1.svg","components/ActiveQuiz/ActiveQuiz.module.css","components/ActiveQuiz/AnswersList/AnswerItem/AnswerItem.module.css","components/FinishedQuiz/FinishedQuiz.module.css","containers/Quiz/Quiz.module.css","components/UI/Loading/Loading.module.css","components/Navigation/MenuToggle/MenuToggle.module.css","hoc/Layout/Layout.module.css","components/ActiveQuiz/AnswersList/AnswersList.module.css","img/loader.svg","hoc/Layout/Layout.js","components/ActiveQuiz/AnswersList/AnswerItem/AnswerItem.js","components/ActiveQuiz/AnswersList/AnswersList.js","components/UI/Loading/Loading.js","components/ActiveQuiz/ActiveQuiz.js","components/UI/Button/Button.js","components/FinishedQuiz/FinishedQuiz.js","components/Navigation/Drawer/Drawer.js","components/Navigation/MenuToggle/MenuToggle.js","containers/Quiz/Quiz.js","components/StartQuiz/StartQuiz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Layout","className","classes","this","props","children","Component","AnswerItem","answer","id","text","state","onAnswerClick","cls","cn","correct","wrong","onClick","AnswersList","answers","map","index","key","Loading","Wrapper","src","LoadingImg","alt","ActiveQuiz","loading","question","Question","Button","disabled","FinishedQuiz","checkpoint","onRetry","thumbsUp","totalScore","Drawer","activeQuestion","quizData","items","getMoneyCssClasses","money","activeQuiz","active","prevQuiz","unactive","close","isOpen","renderLinks","MenuToggle","onToggle","open","Quiz","handleWindowSizeChange","setState","width","window","innerWidth","onAnswerClickHandler","answerId","isFetching","rightAnswerId","isLoading","setTimeout","answerState","isFinished","timeout","isQuizFinished","isLoaded","newItems","clearTimeout","retryHandler","toggleMenuHandler","menu","menuCloseHandler","fetch","then","res","json","result","error","addEventListener","removeEventListener","length","isMobile","message","onClose","quizLength","answerNumber","StartQuiz","imgWrapper","startWrapper","headline","App","useState","isStart","setIsStarted","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.5534c532.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"StartQuiz\":\"StartQuiz_StartQuiz__2O3MX\",\"thumbsUp\":\"StartQuiz_thumbsUp__n3X8F\",\"headline\":\"StartQuiz_headline__agj3G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Drawer\":\"Drawer_Drawer__3w1Bp\",\"close\":\"Drawer_close__5Au5A\",\"active\":\"Drawer_active__17zUr\",\"unactive\":\"Drawer_unactive__3szsm\"};","module.exports = __webpack_public_path__ + \"static/media/hand-1.ad6621a0.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ActiveQuiz\":\"ActiveQuiz_ActiveQuiz__3sdjV\",\"Question\":\"ActiveQuiz_Question__2uHtG\",\"question\":\"ActiveQuiz_question__3iLgo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswerItem\":\"AnswerItem_AnswerItem__3cpKr\",\"correct\":\"AnswerItem_correct__3EbU4\",\"wrong\":\"AnswerItem_wrong__3Wy7j\",\"itemSectionStyle\":\"AnswerItem_itemSectionStyle__2TeYD\",\"selected\":\"AnswerItem_selected__1G5KS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FinishedQuiz\":\"FinishedQuiz_FinishedQuiz__161Xp\",\"thumbsUp\":\"FinishedQuiz_thumbsUp___tbGx\",\"totalScore\":\"FinishedQuiz_totalScore__PQUwf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Quiz\":\"Quiz_Quiz__1NHQK\",\"Wrapper\":\"Quiz_Wrapper__1unif\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"Loading_Wrapper__JXqBx\",\"Loading\":\"Loading_Loading__EPhT8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MenuToggle\":\"MenuToggle_MenuToggle__mRe8P\",\"open\":\"MenuToggle_open__i-8UQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__1s2jD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswersList\":\"AnswersList_AnswersList__2TtY8\"};","module.exports = __webpack_public_path__ + \"static/media/loader.a3d1f0d1.svg\";","import React, {Component} from 'react';\r\nimport classes from './Layout.module.css';\r\n\r\nclass Layout extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Layout}>\r\n                <main>\r\n                    {this.props.children}\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Layout;","import React from 'react';\r\nimport classes from  './AnswerItem.module.css';\r\nimport cn from 'classnames';\r\n\r\nconst AnswerItem = (props) => {\r\n\r\n    const {answer: {id, text}, state, onAnswerClick} = props;\r\n\r\n    const cls = cn(\r\n        classes.AnswerItem, {\r\n            [classes.correct] : state === 'correct',\r\n            [classes.wrong] : state === 'wrong'\r\n        })\r\n\r\n    return (\r\n        <div className={cls}\r\n             onClick={() => {\r\n                 onAnswerClick(id)\r\n             }}>\r\n            {text}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnswerItem;","import React from 'react';\r\nimport classes from './AnswersList.module.css';\r\nimport AnswerItem from \"./AnswerItem/AnswerItem\";\r\nimport PropTypes from \"prop-types\"\r\n\r\nconst propTypes = {\r\n    answers: PropTypes.array.isRequired,\r\n}\r\n\r\nconst AnswersList = (props) => {\r\n    const {onAnswerClick,state} = props;\r\n\r\n    return (\r\n        <div className={classes.AnswersList}>\r\n\r\n            {props.answers.map((answer,index)=> {\r\n                return(\r\n                    <AnswerItem\r\n                        key={index}\r\n                        answer={answer}\r\n                        onAnswerClick={onAnswerClick}\r\n                        state={state ? state[answer.id] : null}\r\n                    />\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n};\r\n\r\nAnswersList.propTypes = propTypes;\r\n\r\nexport default AnswersList;","import React from 'react';\r\nimport LoadingImg from \"../../../img/loader.svg\";\r\nimport classes from \"./Loading.module.css\"\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <div className={classes.Wrapper}>\r\n            <img src={LoadingImg} className={classes.Loading} alt=\"Loading\"/>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Loading;","import React from 'react';\r\nimport classes from './ActiveQuiz.module.css'\r\nimport AnswersList from \"./AnswersList/AnswersList\";\r\nimport Loading from \"../UI/Loading/Loading\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst propTypes = {\r\n    loading: PropTypes.bool.isRequired,\r\n    question: PropTypes.string.isRequired,\r\n    answers: PropTypes.array.isRequired,\r\n    state: PropTypes.any,\r\n    onAnswerClick: PropTypes.func,\r\n}\r\n\r\nconst ActiveQuiz = (props) => {\r\n\r\n    const {loading, question, state, answers, onAnswerClick} = props;\r\n\r\n    return (\r\n        <div className={classes.ActiveQuiz}>\r\n            {loading && <Loading/>}\r\n            <p className={classes.Question}>\r\n            <span className={classes.question}>\r\n                {question}\r\n            </span>\r\n            </p>\r\n            <AnswersList\r\n                state={state}\r\n                answers={answers}\r\n                onAnswerClick={onAnswerClick}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nActiveQuiz.propTypes = propTypes;\r\n\r\nexport default ActiveQuiz;","import React from 'react';\r\n// import classes from './Button.module.css';\r\n\r\nconst Button = (props) => {\r\n    const {onClick, disabled, children} = props;\r\n    // const cls = [\r\n    //     classes.Button,\r\n    //     classes[props.type]\r\n    // ]\r\n    return (\r\n        <button\r\n            onClick={onClick}\r\n            // className={cls.join(' ')}\r\n            className={\"Button\"}\r\n            disabled={disabled}\r\n        >\r\n            {children}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport classes from './FinishedQuiz.module.css';\r\nimport thumbsUp from '../../img/hand-1.svg';\r\nimport Button from \"../UI/Button/Button\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst propTypes = {\r\n    checkpoint: PropTypes.string.isRequired,\r\n    onRetry: PropTypes.func.isRequired\r\n}\r\n\r\nconst FinishedQuiz = (props) => {\r\n    const {checkpoint, onRetry} = props;\r\n    return (\r\n        <div className={classes.FinishedQuiz}>\r\n            <div className=\"imgWrapper\">\r\n                <img className={classes.thumbsUp} src={thumbsUp} alt=\"Screenshot\"/>\r\n            </div>\r\n            <div className={classes.totalScore}>\r\n                <h2>Total score:</h2>\r\n                <div className=\"earned\">${checkpoint} earned</div>\r\n                <Button onClick={onRetry}>\r\n                    Try again\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nFinishedQuiz.propTypes = propTypes;\r\n\r\nexport default FinishedQuiz;","import React, {Component} from 'react'\r\nimport classes from './Drawer.module.css'\r\n// import Backdrop from \"../../UI/Backdrop/Backdrop\";\r\nimport cn from 'classnames';\r\n\r\nclass Drawer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {activeQuestion: 0};\r\n    }\r\n\r\n    renderLinks() {\r\n        return this.props.quizData.map((items, index) =>\r\n            <li className={this.getMoneyCssClasses(index, items)} key={index}>\r\n                $ {items.money}\r\n            </li>\r\n        );\r\n    }\r\n\r\n    getMoneyCssClasses(index, items) {\r\n        return (this.props.activeQuiz === index ? classes.active : '')\r\n            ||\r\n            (items.prevQuiz ? classes.unactive : '');\r\n    }\r\n\r\n    render() {\r\n\r\n        const cls = cn(\r\n            [classes.Drawer], {\r\n                [classes.close]: !this.props.isOpen\r\n            }\r\n        )\r\n\r\n        return (\r\n            <>\r\n                <nav className={cls}>\r\n                    <ul>\r\n                        {this.renderLinks()}\r\n                    </ul>\r\n                </nav>\r\n                {/*{this.props.isOpen ? <Backdrop onClick={this.props.onClose}/> : null}*/}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Drawer","import React from 'react'\r\nimport classes from './MenuToggle.module.css'\r\nimport cn from 'classnames';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst propTypes = {\r\n    isOpen: PropTypes.bool.isRequired\r\n}\r\n\r\nconst MenuToggle = props => {\r\n\r\n    const {isOpen, onToggle} = props;\r\n\r\n    const cls = cn(\r\n        classes.MenuToggle, 'fa', 'fa-bars', {\r\n            'fa-times': isOpen,\r\n            [classes.open]: isOpen\r\n        })\r\n\r\n    return (\r\n        <i\r\n            className={cls}\r\n            onClick={onToggle}\r\n        />\r\n    )\r\n}\r\n\r\nMenuToggle.propTypes = propTypes;\r\n\r\nexport default MenuToggle","import React, {Component} from 'react';\r\nimport classes from './Quiz.module.css';\r\nimport ActiveQuiz from \"../../components/ActiveQuiz/ActiveQuiz\";\r\nimport FinishedQuiz from \"../../components/FinishedQuiz/FinishedQuiz\";\r\nimport Drawer from \"../../components/Navigation/Drawer/Drawer\";\r\nimport MenuToggle from \"../../components/Navigation/MenuToggle/MenuToggle\";\r\nimport Loading from \"../../components/UI/Loading/Loading\";\r\n\r\nclass Quiz extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoaded: false,\r\n            items: [],\r\n            isFetching: false,\r\n            isFinished: false,\r\n            activeQuestion: 0,\r\n            answerState: null, // { [id]: 'success' 'error' }\r\n            checkpoint: null,\r\n            menu: false,\r\n            width: window.innerWidth,\r\n            isLoading: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        fetch(\"https://yurii07.github.io/millionaire/data.json\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    setTimeout(() => {\r\n                        this.setState({\r\n                            isLoaded: true,\r\n                            items: result\r\n                        });\r\n                    }, 1000)\r\n                },\r\n                // Note: it's important to handle errors here, and not in the catch () block,\r\n                // so as not to catch exceptions from errors in the components themselves.\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            )\r\n\r\n        window.addEventListener('resize', this.handleWindowSizeChange);\r\n        if (this.state.width > 800) {\r\n            this.setState({\r\n                menu: true\r\n            })\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            menu: false\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.handleWindowSizeChange);\r\n    }\r\n\r\n    handleWindowSizeChange = () => {\r\n        this.setState({width: window.innerWidth});\r\n    };\r\n\r\n    onAnswerClickHandler = answerId => {\r\n\r\n        // check right. if double click on right answer\r\n        // if (this.state.answerState) {\r\n        //     const key = Object.keys(this.state.answerState)[0]\r\n        //     if (this.state.answerState[key] === 'correct') {\r\n        //         return\r\n        //     }\r\n        // }\r\n        if (this.state.isFetching) {\r\n            return\r\n        }\r\n\r\n        const question = this.state.items[this.state.activeQuestion]\r\n\r\n        if (question.rightAnswerId === answerId) {\r\n\r\n            this.setState({\r\n                isFetching: true,\r\n                isLoading: true\r\n            })\r\n\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    answerState: {[answerId]: 'correct'}\r\n                })\r\n            }, 2000)\r\n\r\n            const timeout = setTimeout(() => {\r\n                if (this.isQuizFinished()) {\r\n                    this.setState({\r\n                        isLoaded: false,\r\n                        isFinished: true,\r\n                        checkpoint: this.state.items[this.state.activeQuestion].money\r\n                    })\r\n                    return;\r\n                }\r\n\r\n                // this.state.items[this.state.activeQuestion].prevQuiz = true;\r\n                this.setState(({items})=>{\r\n                    // let newItems = Object.assign([],items);\r\n                    let newItems = [...items];\r\n                    newItems[this.state.activeQuestion].prevQuiz = true;\r\n                    return {\r\n                        items:newItems\r\n                    }\r\n                })\r\n\r\n                this.setState({\r\n                    activeQuestion: this.state.activeQuestion + 1,\r\n                    answerState: null,\r\n                    checkpoint: this.state.items[this.state.activeQuestion].money,\r\n                    isFetching: false,\r\n                    isLoading: false\r\n                })\r\n\r\n                clearTimeout(timeout)\r\n\r\n            }, 3000)\r\n\r\n            return;\r\n        }\r\n        this.setState({\r\n            isLoading: true,\r\n        })\r\n        setTimeout(() => {\r\n            this.setState({\r\n                answerState: {[answerId]: 'wrong'}\r\n            })\r\n        }, 2000)\r\n\r\n        setTimeout(() => {\r\n            this.setState({\r\n                isLoading: false,\r\n                isFinished: true,\r\n            })\r\n        }, 3000)\r\n\r\n    }\r\n\r\n    isQuizFinished() {\r\n        return this.state.activeQuestion + 1 === this.state.items.length\r\n    }\r\n\r\n    retryHandler = () => {\r\n\r\n        this.setState({\r\n            isFinished: false,\r\n            activeQuestion: 0,\r\n            answerState: null,\r\n            checkpoint: null,\r\n        })\r\n    }\r\n\r\n    toggleMenuHandler = () => {\r\n        this.setState({\r\n            menu: !this.state.menu\r\n        })\r\n    }\r\n\r\n    menuCloseHandler = () => {\r\n        this.setState({\r\n            menu: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {width, error, isLoaded, items, activeQuestion, answerState, isLoading, menu, checkpoint, isFinished} = this.state;\r\n        const isMobile = width <= 800;\r\n\r\n        if (error) {\r\n            return <div>Error: {error.message}</div>;\r\n        } else if (!isLoaded) {\r\n            return <Loading/>;\r\n        } else {\r\n            return (\r\n                <div className={classes.Quiz}>\r\n                    {isFinished\r\n                        ? <FinishedQuiz\r\n                            onRetry={this.retryHandler}\r\n                            checkpoint={checkpoint}/>\r\n                        :\r\n                        <div className={classes.Wrapper}>\r\n                            <Drawer isOpen={menu}\r\n                                    onClose={this.menuCloseHandler}\r\n                                    quizData={items}\r\n                                    activeQuiz={activeQuestion}/>\r\n\r\n                            {isMobile &&\r\n                            <MenuToggle\r\n                                onToggle={this.toggleMenuHandler}\r\n                                isOpen={menu}/>\r\n                            }\r\n\r\n                            <ActiveQuiz\r\n                                answers={items[activeQuestion].answers}\r\n                                question={items[activeQuestion].question}\r\n                                onAnswerClick={this.onAnswerClickHandler}\r\n                                quizLength={items.length}\r\n                                answerNumber={activeQuestion + 1}\r\n                                state={answerState}\r\n                                loading={isLoading}/>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Quiz;","import React from 'react';\r\nimport classes from './StartQuiz.module.css'\r\nimport thumbsUp from '../../img/hand-1.svg';\r\n\r\nconst StartQuiz = (props) => {\r\n\r\n    return (\r\n        <div className={classes.StartQuiz}>\r\n            {/*<div className={classes.Wrapper}>*/}\r\n                <div className={classes.imgWrapper}>\r\n                    <img className={classes.thumbsUp} src={thumbsUp} alt=\"thumbsUp\"/>\r\n                </div>\r\n                <div className={classes.startWrapper}>\r\n                    <h1 className={classes.headline}>Who wants to be a millionaire?</h1>\r\n\r\n                    <button\r\n                        className=\"Button\"\r\n                        onClick={props.onClick}>Start\r\n                    </button>\r\n                </div>\r\n            {/*</div>*/}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StartQuiz;","import React, {useState} from 'react';\r\nimport Layout from \"./hoc/Layout/Layout\";\r\nimport Quiz from \"./containers/Quiz/Quiz\";\r\nimport StartQuiz from \"./components/StartQuiz/StartQuiz\";\r\n\r\nconst App = () => {\r\n    const [isStart, setIsStarted] = useState(false);\r\n    const startGame = () => setIsStarted(true);\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n\r\n            {isStart\r\n                ? <Layout>\r\n                    <Quiz/>\r\n                </Layout>\r\n                :\r\n                <StartQuiz\r\n                    onClick={startGame}\r\n                />\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}